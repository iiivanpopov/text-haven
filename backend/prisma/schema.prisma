generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  username String   @unique
  password String
  role     Role     @default(USER)
  exposure Exposure @default(PRIVATE)

  token   Token?
  files   File[]
  folders Folder[]

  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt @db.Timestamptz(3)
  Settings  Settings[]
}

model Token {
  id           String @id @default(cuid())
  refreshToken String @unique
  userId       String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id       String   @id @default(cuid())
  userId   String
  parentId String?
  name     String   @default("Untitled")
  exposure Exposure @default(PRIVATE)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Folder?  @relation("FolderToParent", fields: [parentId], references: [id])
  children Folder[] @relation("FolderToParent")
  files    File[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@index([userId, parentId])
}

model File {
  id        String   @id @default(cuid())
  userId    String
  folderId  String
  name      String   @default("Untitled")
  exposure  Exposure @default(PRIVATE)
  expiresAt DateTime
  type      FileType @default(NOTE)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@index([userId, folderId])
}

model Settings {
  id     String @id @default(cuid())
  userId String @unique

  defaultTextType FileType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum Exposure {
  PUBLIC
  PRIVATE
}

enum FileType {
  NOTE
  POST
}
